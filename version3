import glob
import os
import cv2
import re
import shutil

IMAGEPATH0 = "自分のパス"
VIDEOPATH = "IMAGEPATH0 + /onefile/"
IMAGEPATH = "IMAGEPATH0 + /onefile/"
TEMPLATEPATH = name+"/sonota/temp.jpg"
#nameには自分の場所を入れる
def save_frames(video_path, image_dir):
    cap = cv2.VideoCapture(video_path)

    if not cap.isOpened():
        print("video cannot opened")
        return

    digit = len(str(int(cap.get(cv2.CAP_PROP_FRAME_COUNT))))
    #cv2.CAP_PROP_FRAME_COUNTは動画のフレーム数を取得する
    n = 0

    while True:
        ret, frame = cap.read()
        #cap.read()はcapの内容を読み込む
        if ret:
            cv2.imwrite('{}/image/{}_{}.{}'.format(IMAGEPATH, "frame", str(n), "jpg"), frame)
            n += 1
        else:
            return

def backgroundsub():
    """
    背景差分
    """
    img_list = glob.glob(IMAGEPATH+"image/frame_*.jpg")
    #glob.globは特定のファイルを取得する
    num = lambda val: int(re.sub("\D","",val))
    #reは正規表現
    sorted(img_list,key=(num))
    source = img_list[0]
    for path in img_list:
        diff = cv2.absdiff(cv2.imread(source), cv2.imread(path))
        source = path
        save_image(path, "bgsub", diff)
        
def grayscale(image_path):
    img = cv2.imread(image_path)
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #imread で取得したデータは BGR 形式なので、cv2.COLOR_BGR2GRAY　を第2引数に指定
    img_thresh = cv2.adaptiveThreshold(img_gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 25,2)
    #cv2.adaptiveThresholdは適応的閾値処理、cv2.ADAPTIVE_THRESH_GAUSSIAN_Cは近傍領域の重み付け平均値を採用
    #cv2.THRESH_BINARYは閾値の種類
    save_image(image_path, "gray", img_thresh)        
def template_matching():
    """
    テンプレート画像とフレーム画像でテンプレートマッチングを行う
    """
    template_img = cv2.imread(IMAGEPATH+"gray/temp.jpg")
    img_list = glob.glob(IMAGEPATH+"gray/frame_*.jpg")
    def num(val): return int(re.sub("\D", "", val))
    img_list = sorted(img_list, key=(num))
    location_list = []
    for path in img_list:
        img =cv2.imread(path)
        result = cv2.matchTemplate(img, template_img, cv2.TM_CCOEFF)
        minVal, maxVal, minLoc, maxLoc = cv2.minMaxLoc(result)
        location_list.append(maxLoc)

    return location_list

def draw_rectangle(location_list,b,g,r,SOURCE):
    """
    マッチング結果を画像に描画する
    """
    source = cv2.imread(SOURCE)
    cv2.imwrite(IMAGEPATH0+"/result/result.jpg", source)
    template_img = cv2.imread(IMAGEPATH+"/gray/temp.jpg")
    w, h, _ = template_img.shape
    for loc in location_list:
        x, y = round(loc[0] + w/2), round(loc[1] + h/2)
        img = cv2.drawMarker(source, (x,y), (b, g, r), markerType=cv2.MARKER_CROSS, thickness=2)
        #img = cv2.drawMarker(source, (x,y), (b, g, r), markerType=cv2.MARKER_TILTED_CROSS, thickness=2)

    return img

def save_image(img_path, dir, img):
    """
    画像保存
    img_path : 画像のパス
    dir : ディレクトリ名
    img : 画像データ
    """
    file_name = img_path.replace("\\","/").split(".")[0].split("/")[-1]
    cv2.imwrite("{}{}/{}.{}".format(IMAGEPATH, dir, file_name, "jpg"), img)

def remove_onefile():
    """
    onefile上に入っているimage,bgsub,grayファイル内の写真を削除する
    """
    file_list = glob.glob(IMAGEPATH+'/*.jpg')
    for file in file_list:
        os.remove(file)

    folder_list = glob.glob(IMAGEPATH+'/*')
    for folder in folder_list:
        shutil.rmtree(folder)

    os.makedirs(IMAGEPATH+'/image')
    os.makedirs(IMAGEPATH+'/bgsub')
    os.makedirs(IMAGEPATH+'/gray')

def analize_onefile():
    file_list = glob.glob(IMAGEPATH0+'/videos/*')
    first_flg = True

    for file in file_list:
        print(file)
        print('色を選んでください')
        print('0=黒,1=白,2=緑,3=青,4=黄色,5=赤')
        a = int(input())
        if a == 0:
            b = 0
            g = 0
            r = 0
        elif a == 1:
            b = 255
            g = 255
            r = 255
        elif a == 2:
            b = 0
            g = 255
            r = 0
        elif a == 3:
            b =255
            g = 0
            r = 0
        elif a == 4:
            b = 0
            g = 255
            r = 255
        elif a == 5:
            b = 0
            g = 0
            r = 255
        else:
            print('色がありません')
        #b = int(input('input B number'))
        #g = int(input('input G number'))
        #r = int(input('input R number'))

        save_frames(file,IMAGEPATH)
        backgroundsub()

        for path in glob.glob(IMAGEPATH+"/bgsub/frame_*.jpg"):
            grayscale(path)

        grayscale(IMAGEPATH0+'/temp.jpg')
        location_list = template_matching()
        file = os.path.splitext(os.path.basename(file))[0]

        if first_flg:
            source = IMAGEPATH+"/image/frame_0.jpg"
            first_flg = False
        else:
            source = IMAGEPATH0+"/result/result.jpg"
        result_img = draw_rectangle(location_list,b,g,r,source)
        cv2.imwrite(IMAGEPATH0+'/result/result.jpg', result_img)
        
        print(file + ' completed!!')
        remove_onefile()
